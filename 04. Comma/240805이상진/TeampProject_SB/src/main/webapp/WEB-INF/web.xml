<?xml version="1.0" encoding="UTF-8" ?>
<web-app xmlns="https://jakarta.ee/xml/ns/jakartaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_6_0.xsd"
         metadata-complete="false"
         version="6.0">
    <!-- web.xml은 Web Application이 구동될때 메모리에 로드되며 Web Application이 실행될 때 함께 올라가야할 설정들을 정의해놓은 파일 -->
    <!-- web.xml에서는 DispatcherServlet, ConextLoaderListner, Filter를 설정한다 -->

    <!-- ContextLoaderListner 관련 설정 -->
    <!-- 규모가 커지면 Servlet도 여러개가 존재할 것이다. DispatcherServlet으로 각각의 Servlet에 대한 설정을 할 수 있는데
    모든 Servlet이 공통적으로 가져야되는 설정도 있을 것이다. 그래서 Servlet 단위가 아닌 Web Application 단위 설정을 할 수 있는데
    이걸 할 수 있는 부분이 ContextLoaderListener 영역이다. ContextLoaderListener 영역에 설정값들은 Servlet이 공통으로 참조할 수 있는
    부모 설정이다 -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/spring/root-context.xml</param-value>
    </context-param>

    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

<!-- DispatcherServlet은 클라이언트(사용자)의 요청을 받아서 처리하는 객체이다 -->
<!-- 1. 클라이언트가 요청을 보냄
     2. 요청을 처리해줄 컨트롤러 객체를 찾는다
     -> HandlerMapping이 요청을 처리하는데 url을 이용해 매핑된 메소드를 소유하고 있는 객체를 찾아 DispatcherServlet에 리턴한다
     3. Controller에 매핑되어있는 메소드를 실행시킨다
     -> HandlerAdapter가 처리한다
     4. 개발자가 구현한 비즈니스 로직을 거쳐 응당할 데이터가 추출되고 실행된 Controller는 데이터, view를 HandlerAdapter에 리턴한다
     5. HandlerAdapter는 데이터, view를 ModeAndView형태로 DispatcherServlet에 리턴한다.
     -> view는 화면에 표출될 파일이다 (html, jsp, ...), 지정된 화면 파일의 이름에 해당하는 파일을 찾는 역할은 ViewResolver객체가 담당한다
     6. DispatcherServlet은 HandlerAdapter에게 리턴받은 데이터,ViewResolver가 찾은 화면파일을 클라이언트 응답으로 리턴한다.
     -->
    <servlet>
        <servlet-name>appServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
        </init-param>

        <!--multipartResolver 관련 설정-->
        <multipart-config>
            <!--파일 하나당 최대 크기 지정-->
            <max-file-size>10000000</max-file-size>
            <!--요청당 최대 크기 지정(모든 파일의 크기의 합)-->
            <max-request-size>100000000</max-request-size>
        </multipart-config>
    </servlet>

    <servlet-mapping>
        <servlet-name>appServlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!--filter 관련 설정-->
    <!--사용자가 보낸 요청을 DispatcherServlet이 처리하기 전에 거치는 객체가 Filter 객체이다.
        스프링 시큐리티 필터가 적용되어 있다면 인가 및 인증이 먼저 처리되고
        인코딩 필터가 적용되어 있다면 클라이언트에서 넘어온 데이터가 인코딩 필터를 먼저 거쳐
        인코딩 작업이 먼저 처리된 후에 DispatcherServlet에게 인코딩된 데이터가 전달된다.
    -->

    <!-- filter 관련 설정 -->
    <!-- 사용자가 보낸 요청을 DispatcherServlet이 처리하기 전에 거치는 객체가 Filter 객체이다.
    스프링 시큐리티 필터가 적용되어 있다면 인가 및 인증이 먼저처리되고
    인코딩 필터가 적용되어 있다면 클라이언트에서 넘어온 데이터가 인코딩 필터를 먼저 거쳐
    인코딩 작업이 먼저 처리된 후에 DispatcherServlet에게 인코딩된 데이터가 전달된다. -->
    <filter>
        <filter-name>characterEncoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>characterEncoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- SpringFramework, Tomcat 사용하여 서버를 열 때, 기본적인 index.jsp 대신 login.jsp를 설정-->
    <welcome-file-list>
        <welcome-file>/WEB-INF/views/user/login.jsp</welcome-file>
    </welcome-file-list>
</web-app>