<?xml version="1.0" encoding="UTF-8" ?>

<!-- 동작 순서
     1. web.xml 읽음
     2. ContextLoaderListener설정을 읽으면서 그안에 지정된
        root-context.xml을 읽어서 부모 컨테이너 생성
     3. DispatcherServlet설정을 읽으면서 그안에 지정된
        servlet-context.xml을 읽으면서 자식 컨테이너 생성
-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!--Spring Annotation 활성화-->
    <mvc:annotation-driven/>

    <!--정적 리소스에 대한 접근 허용
        기본적으로 Spring에서는 정적 리소스에 대한 접근을 막고 있기 때문에 이 설정을 통해
        html, js, css, 이미지 파일등 정적 파일에 대한 접근을 풀어 줄 수 있다.
        web서버에서 기본적으로 rootpath가 webapp 폴더로 잡혀있다.
    -->
    <mvc:resources mapping="/upload/**" location="file:///C:/tmp/upload/"/>
    <mvc:resources mapping="/static/**" location="/static/"></mvc:resources>


    <!--DispatcherServlet에서 사용할 ViewResolver 객체 설정-->
    <!--Controller에서 String이나 ModelAndView 객체를 리턴해주면 ViewResolver가 동작하여 리턴된 문자열이나 ModelAndView객체에
    지정된 ViewName에 해당하는 화면을 찾아주는데 prefix로 지정된 문자열이 앞에 붙고, suffix로 지정된 문자열이 뒤에 붙어서
    하나의 View 파일을 찾아서 DispatcherServlet으로 리턴한다.
    prefix가 /WEB-INF/views/ 이고 suffix가 .jsp라면
    리턴된 문자열이 board/post => /WEB-INF/views/board/post.jsp 파일을 찾아서 리턴한다.-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--setter 메소드를 이용한 의존성 주입-->
        <property name="prefix" value="/WEB-INF/views/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>

    <!--Spring에서는 bean 엘리먼트 말고도 annotation으로도 bean 객체를 생성해서 등록할 수 있는데
   @Component, @Controller, @Service, @Repository 등으로도 bean 객체를 생성해서 등록할 수 있다.
   어노테이션들을 읽어서 bean 객체를 생성하고 등록하는 설정
   context:component-scan 이설정은 기본적으로 @Coponent 어노테이션을 읽어서 bean객체를 생성하는데
   @Controller, @Service, @Repository가 @Component를 포함하고 있기 때문에 context:component-scan에서 읽어서 bean 객체를 생성한다.
   base-packge 속성으로 @Component, @Controller, @Service, @Repository 어노테이션들이 붙어있는 클래스를 찾을 패키지 지정-->
    <!--@Controller이 붙은 객체들은 요청이 올때마다 생성돼서 사용되므로 servlet-context.xml에서
        요청이 올때마다 생성될 수 있게 설정한다.-->

    <!-- Controller 생성자 주입을  -->
    <context:component-scan base-package="com.bit.springboard.controller"/>

    <!--파일이나 다양한 종류의 multipart 형식의 데이터가 전송될 때 처리해줄 multipartResovler 객체 bean등록
        id는 항상 multipartResolver로 지정해야 된다.
        id 값이 고정되어 있는 bean 객체들이 존재한다.(multipartResovler, dataSource,...)
    -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.support.StandardServletMultipartResolver"/>

</beans>