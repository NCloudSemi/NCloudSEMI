<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.bit</groupId>
    <artifactId>TeampProject_SB</artifactId>
    <packaging>war</packaging>
    <version>1.0-SNAPSHOT</version>
    <name>TeampProject_SB Maven Webapp</name>
    <!-- 코드추가, 버전들을 변수(속성)으로 선언 -->
    <properties>
        <java-version>17</java-version>
        <org.springframework-version>6.0.22</org.springframework-version>
        <org.aspectj-version>1.9.22</org.aspectj-version>
        <org.slf4j-version>2.0.13</org.slf4j-version>
    </properties>
    <!-- line11의 url 제거 -->
    <!-- <url>http://maven.apache.org</url> -->
    <dependencies>
        <!-- 기존에 있던 엘리먼트 내용 모두 삭제 -->
        <!--        <dependency>-->
        <!--            <groupId>junit</groupId>-->
        <!--            <artifactId>junit</artifactId>-->
        <!--            <version>3.8.1</version>-->
        <!--            <scope>test</scope>-->
        <!--        </dependency>-->

        <!-- dependencies 엘리먼트에 의존성 하나씩 주입 -->

        <!-- springframwork 관련 의존성(라이브러리) 주입 -->
        <!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${org.springframework-version}</version>
            <exclusions>
                <exclusion>
                    <groupId>commons-logging</groupId>
                    <artifactId>commons-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${org.springframework-version}</version>
        </dependency>

        <!-- AspectJ 관련 의존성 주입, AspectJ는 AOP(Aspect Oriented Programming, 관점 지향 프로그래밍)의 확장 기능 -->
        <!-- https://mvnrepository.com/artifact/org.aspectj/aspectjrt -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
            <version>${org.aspectj-version}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>${org.aspectj-version}</version>
            <scope>runtime</scope>
        </dependency>

        <!-- inject-api 의존성 주입, inject-api는 스프링에서 자동 의존성 주입을 위한 라이브러리 -->
        <dependency>
            <groupId>jakarta.inject</groupId>
            <artifactId>jakarta.inject-api</artifactId>
            <version>2.0.1</version>
        </dependency>

        <!-- servlet 관련 의존성 주입 -->
        <!-- servlet
             1. 사용자 요청에 맞는 Controller 객체 찾음
             2. 사용자 요청에 맞는 메소드 실행
             3. 실행후 결과를 화면에 바인딩
             4. 바인딩된 화면을 사용자에게 리턴해준다 -->
        <dependency>
            <groupId>jakarta.servlet</groupId>
            <artifactId>jakarta.servlet-api</artifactId>
            <version>6.0.0</version>
            <scope>provided</scope>
        </dependency>
        <!-- JSP(Java Server Page): html에 동적데이터를 바인딩할 수 있는 페이지 -->
        <dependency>
            <groupId>jakarta.servlet.jsp</groupId>
            <artifactId>jakarta.servlet.jsp-api</artifactId>
            <version>3.1.0</version>
            <scope>provided</scope>
        </dependency>
        <!-- jstl: jsp에 동적데이터를 바인딩 해주는 템플릿 엔진 -->
        <!-- https://mvnrepository.com/artifact/jakarta.servlet.jsp.jstl/jakarta.servlet.jsp.jstl-api -->
        <dependency>
            <groupId>jakarta.servlet.jsp.jstl</groupId>
            <artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
            <version>3.0.0</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.glassfish.web/jakarta.servlet.jsp.jstl -->
        <dependency>
            <groupId>org.glassfish.web</groupId>
            <artifactId>jakarta.servlet.jsp.jstl</artifactId>
            <version>3.0.1</version>
        </dependency>
        <!-- 데이터를 동적으로 바인딩할때 el표기법 사용 => ${} -->
        <!-- el표기법을 사용하기 위한 라이브러리 -->
        <!-- https://mvnrepository.com/artifact/jakarta.el/jakarta.el-api -->
        <dependency>
            <groupId>jakarta.el</groupId>
            <artifactId>jakarta.el-api</artifactId>
            <version>5.0.0</version>
        </dependency>


        <!-- https://mvnrepository.com/artifact/jakarta.annotation/jakarta.annotation-api -->
        <!--
        @PostConstruct
        @PreDestroy
        @Resource
        @Generated
        @ManagedBean
        @WebServiceRef
        @WebServlet, @WebFilter, @WebListener
        Jakarta EE 애플리케이션에서 사용할 수 있는 어노테이션 제공, 일관성있는 개발 도와줌
        -->
        <dependency>
            <groupId>jakarta.annotation</groupId>
            <artifactId>jakarta.annotation-api</artifactId>
            <version>3.0.0</version>
        </dependency>

        <!-- DBCP(Database Connectin Pool) 추가, DB연결을 효율적으로 관리하기위해 DBCP를 제공 -->
        <!-- https://mvnrepository.com/artifact/org.apache.commons/commons-dbcp2 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-dbcp2</artifactId>
            <version>2.12.0</version>
        </dependency>

        <!--mysql-connectorj-->
        <!-- Java에서 MySql의 DB에 접근해서 DB작업을 할 수 있게해준다 -->
        <!-- https://mvnrepository.com/artifact/com.mysql/mysql-connector-j -->
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <version>8.3.0</version>
        </dependency>

        <!--JDBC Template 의존성 주입-->
        <!-- JDBC를 사용해서 DB와 상호작용할 수 있도록 지원한다 -->
        <!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${org.springframework-version}</version>
        </dependency>

        <!--mybatis 관련 의존성 주입-->
        <!-- mybatis는 DB와의 상호작용을 간편하게 해주는 ORM(Object-Relational-Mappgin) 프레임워크이다. -->
        <!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.16</version>
        </dependency>
        <!-- mybatis와 Spring 프레임워크를 통합하기 위한 라이브러리 -->
        <!-- mybatis를 Spring 애플리케이션에서 손쉽게 사용할 수 있도록 도와준다 -->
        <!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>3.0.3</version>
        </dependency>

        <!--json 데이터 형식을 사용하기 위한 의존성 주입-->
        <!-- json데이터와 java객체간의 변환을 지원한다 -->
        <!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.17.2</version>
        </dependency>
        <!-- java8의 날짜와 시간 API를 JSP에서 사용할 수 있게해준다 -->
        <dependency>
            <groupId>net.sargue</groupId>
            <artifactId>java-time-jsptags</artifactId>
            <version>2.0.0</version>
        </dependency>

        <!--ajax에서 LocalDateTime 타입의 직렬화 해결하는 라이브러리-->
        <!-- java8의 날짜와 시간관련 클래스를 직렬화, 역직렬화 할 수 있도록 지원한다 -->
        <!-- 직렬화: 객체 -> 바이트 단위 데이터로 변환하여 저장하거나 전송할 수 있는 형식으로 만드는 과정 -->
        <!-- 역직렬화: 바이트 단위 데이터 -> 객체로 복원하는 과정 -->
        <!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.datatype/jackson-datatype-jsr310 -->
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
            <version>2.17.2</version>
        </dependency>

        <!-- java에서 I/O을 보다 쉽게 처리할 수 있게 도와주는 유틸리티 클래스를 지원한다 -->
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.16.1</version>
        </dependency>

        <!-- 웹 애플리케이션에서 파일 업로드를 쉽게 처리할 수 있도록 도와주는 라이브러리 -->
        <!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload -->
        <dependency>
            <groupId>commons-fileupload</groupId>
            <artifactId>commons-fileupload</artifactId>
            <version>1.5</version>
        </dependency>
        <!-- java 바이트코드를 동적으로 생성하고 수정할 수 있는 라이브러리, AOP와 같은 기능을 구현하는데 사용한다 -->
        <!-- https://mvnrepository.com/artifact/cglib/cglib -->
        <dependency>
            <groupId>cglib</groupId>
            <artifactId>cglib</artifactId>
            <version>3.3.0</version>
        </dependency>


    </dependencies>
    <build>
        <!-- build엘리먼트 안의 내용 삭제, 코드추가(플러그인 및 자바 버전 설정)-->
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <source>17</source>
                    <target>17</target>
                    <compilerArgument>-Xlint:all</compilerArgument>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>3.3.0</version>
                <configuration>
                    <mainClass>org.test.int1.Main</mainClass>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
